--- ./external/composable_kernel.cmake~	2024-01-31 00:51:05.000000000 +0000
+++ ./external/composable_kernel.cmake	2024-02-09 14:00:06.284125754 +0000
@@ -1,25 +1 @@
-set(PATCH ${PROJECT_SOURCE_DIR}/patches/composable_kernel/Fix_Clang_Build.patch)
-
-include(FetchContent)
-FetchContent_Declare(composable_kernel
-  URL ${DEP_URL_composable_kernel}
-  URL_HASH SHA1=${DEP_SHA1_composable_kernel}
-  PATCH_COMMAND ${Patch_EXECUTABLE} --binary --ignore-whitespace -p1 < ${PATCH}
-)
-
-FetchContent_GetProperties(composable_kernel)
-if(NOT composable_kernel_POPULATED)
-  FetchContent_Populate(composable_kernel)
-  set(BUILD_DEV OFF CACHE BOOL "Disable -Weverything, otherwise, error: 'constexpr' specifier is incompatible with C++98 [-Werror,-Wc++98-compat]" FORCE)
-  # Exclude i8 device gemm instances due to excessive long compilation time and not being used
-  set(DTYPES fp32 fp16 bf16 fp8)
-  set(INSTANCES_ONLY ON)
-  add_subdirectory(${composable_kernel_SOURCE_DIR} ${composable_kernel_BINARY_DIR} EXCLUDE_FROM_ALL)
-
-  add_library(onnxruntime_composable_kernel_includes INTERFACE)
-  target_include_directories(onnxruntime_composable_kernel_includes INTERFACE
-    ${composable_kernel_SOURCE_DIR}/include
-    ${composable_kernel_BINARY_DIR}/include
-    ${composable_kernel_SOURCE_DIR}/library/include)
-  target_compile_definitions(onnxruntime_composable_kernel_includes INTERFACE __fp32__ __fp16__ __bf16__)
-endif()
+find_package(composable_kernel REQUIRED)
--- ./onnxruntime_kernel_explorer.cmake~	2024-02-11 20:27:01.000000000 +0000
+++ ./onnxruntime_kernel_explorer.cmake	2024-02-11 20:28:49.937526254 +0000
@@ -17,7 +17,8 @@
   check_language(HIP)
   set(LANGUAGE HIP)
   if (onnxruntime_USE_COMPOSABLE_KERNEL)
-    include(composable_kernel)
+    add_library(composablekernels::device_operations SHARED IMPORTED GLOBAL)
+    set_property(TARGET composablekernels::device_operations PROPERTY IMPORTED_LOCATION "/usr/${CMAKE_INSTALL_LIBDIR}/libdevice_operations.a")
   endif()
   if (onnxruntime_USE_HIPBLASLT)
     find_package(hipblaslt REQUIRED)
@@ -67,7 +68,7 @@
   target_compile_definitions(kernel_explorer PRIVATE __HIP_PLATFORM_AMD__=1 __HIP_PLATFORM_HCC__=1)
   if (onnxruntime_USE_COMPOSABLE_KERNEL)
     target_compile_definitions(kernel_explorer PRIVATE USE_COMPOSABLE_KERNEL)
-    target_link_libraries(kernel_explorer PRIVATE onnxruntime_composable_kernel_includes)
+    target_link_libraries(kernel_explorer PRIVATE composablekernels::device_operations)
   endif()
   if (onnxruntime_USE_TRITON_KERNEL)
     target_compile_definitions(kernel_explorer PRIVATE USE_TRITON_KERNEL)
--- ./onnxruntime_providers_rocm.cmake.orig	2024-02-11 20:32:26.066297796 +0000
+++ ./onnxruntime_providers_rocm.cmake	2024-02-11 20:34:00.486682897 +0000
@@ -188,20 +188,9 @@
   endif()
 
   if (onnxruntime_USE_COMPOSABLE_KERNEL)
-    include(composable_kernel)
-    target_link_libraries(onnxruntime_providers_rocm PRIVATE
-      onnxruntime_composable_kernel_includes
-      # Currently we shall not use composablekernels::device_operations, the target includes all conv dependencies, which
-      # are extremely slow to compile. Instead, we only link all gemm related objects. See the following directory on
-      # updating.
-      # https://github.com/ROCmSoftwarePlatform/composable_kernel/tree/develop/library/src/tensor_operation_instance/gpu
-      device_gemm_instance
-      device_gemm_add_fastgelu_instance
-      device_gemm_fastgelu_instance
-      device_gemm_splitk_instance
-      device_gemm_streamk_instance
-      device_batched_gemm_instance
-      device_softmax_instance
+    add_library(composablekernels::device_operations SHARED IMPORTED GLOBAL)
+    set_property(TARGET composablekernels::device_operations PROPERTY IMPORTED_LOCATION "/usr/${CMAKE_INSTALL_LIBDIR}/libdevice_operations.a")
+    target_link_libraries(onnxruntime_providers_rocm PRIVATE composablekernels::device_operations
     )
     target_compile_definitions(onnxruntime_providers_rocm PRIVATE USE_COMPOSABLE_KERNEL)
   endif()
